;include(`forth_macros.m4')

;call an interrupt
IAS int-handler
INT 0x08

;use a variable
JSR find-clock

;turn on the clock
SET A, 0
SET B, 90 
HWI [clock-hw]

;turn on the screen
JSR find-screen
SET A, 0
SET B, [screen-mem-loc]
HWI [screen-hw]

;find the keyboard
JSR find-keyboard
SET A, 3
SET B, 0x01
HWI [keyboard-hw]
SET A, 0
SET B, 0x00
HWI [keyboard-hw]

;Encode the character B
SET A, 66
JSR generate-char
SET B, [screen-mem-loc]
SET [B], A

SET A, 67
JSR generate-char
SET B, [screen-mem-loc]
ADD B, 1
SET [B], A

SET X, 5
SET Y, 5
SET A, greeting
SET B, [screen-mem-loc]
JSR print-string

JSR tick-wait

;Do some signed math
SET A, -1
SET B, 5
MLI B, A
SET X, 1
SET Y, 5
MLI Y, X

SET PC, end

;echo the key in C to the memory loc
;  [screen-cur-pos], then increment that loc
:echo-key
SET PUSH, A
SET PUSH, B

SET A, C
JSR generate-char
SET B, [screen-cur-pos]
SET [B], A
ADD [screen-cur-pos], 1

SET B, POP
SET A, POP
SET PC, POP
; end echo-key

;handle a keypress
:key-handler
SET PUSH, A
SET PUSH, B
SET PUSH, C

;get the key
:key-handle-loop
	SET A, 0x01
	HWI [keyboard-hw]
	IFE C, 0x0
		SET PC, key-handle-end
	IFE C, 0x10
		SET PC, key-handle-backspace
	JSR echo-key
	SET PC, key-handle-loop

:key-handle-backspace
SET PUSH, B
SUB [screen-cur-pos], 1
SUB B, [screen-cur-pos]
SET [B], 0x0000
SET B, POP
SET PC, key-handle-loop

:key-handle-end

SET C, PUSH
SET B, POP
SET A, POP
SET PC, POP
;end key-handler

; interrupt handler
:int-handler
IFE A, 0x01
	JSR key-handler
RFI 0

#include util.dasm

:screen-mem-loc
dat 0xB800
:screen-cur-pos
dat 0xB800

:greeting
dat "Hello, world!"

:end
